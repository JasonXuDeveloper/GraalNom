// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _NomLexer.flex

package com.nom.ideanom;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.nom.ideanom.NomTypes.*;


public class _NomLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\12\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\30\1\35\1\30\1\36\3\30"+
    "\1\37\1\40\1\41\2\30\1\42\1\30\1\43\1\44"+
    "\5\30\1\45\1\46\1\47\1\50\1\30\1\0\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\30"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\30\1\101\1\102\1\103\7\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\4\25\1\26"+
    "\1\1\1\27\1\30\22\25\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\50\1\51"+
    "\1\52\1\53\1\54\3\25\1\0\15\25\1\55\1\25"+
    "\1\56\23\25\1\57\1\60\3\25\1\61\6\25\1\62"+
    "\5\25\1\63\1\64\6\25\1\65\3\25\1\66\1\25"+
    "\1\67\30\25\1\70\17\25\1\71\12\25\1\72\3\25"+
    "\1\73\1\74\2\25\1\75\1\25\1\76\6\25\1\77"+
    "\1\100\2\25\1\101\1\25\1\102\4\25\1\103\10\25"+
    "\1\104\1\25\1\105\1\106\1\25\1\107\6\25\1\110"+
    "\3\25\1\111\4\25\1\112\6\25\1\113\1\25\1\114"+
    "\1\115\6\25\1\116\1\117\1\120\1\121\7\25\1\122"+
    "\1\123\2\25\1\124\1\25\1\125\2\25\1\126\1\25"+
    "\1\127\1\25\1\130\1\131\1\25\1\132\1\25\1\133"+
    "\4\25\1\134\1\0\1\135\1\136\1\137\1\140\1\25"+
    "\1\141\2\0\1\142\16\0\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\104\0\u0198"+
    "\0\104\0\104\0\u01dc\0\u0220\0\104\0\u0264\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\104\0\u03b8\0\u03fc\0\u0440\0\104\0\u0484"+
    "\0\u04c8\0\u050c\0\u0550\0\104\0\u0594\0\104\0\104\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18"+
    "\0\u0a5c\0\104\0\u0aa0\0\104\0\104\0\u0110\0\104\0\u0154"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u0594\0\104\0\104\0\u0ae4\0\104\0\104"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144"+
    "\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\104"+
    "\0\104\0\u1584\0\u15c8\0\u160c\0\u0bf4\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u0484\0\u17e8\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u193c\0\u0484\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u0484\0\u1c28\0\u0484"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u0484\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u0484\0\u29b4\0\u29f8\0\u2a3c\0\u0484"+
    "\0\u0484\0\u2a80\0\u2ac4\0\u0484\0\u2b08\0\u0484\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u0484\0\u0484\0\u2ce4\0\u2d28"+
    "\0\u0484\0\u2d6c\0\u0484\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u0484"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u0484\0\u30e0\0\u0484\0\u0484\0\u3124\0\u0484\0\u3168\0\u31ac"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u0484\0\u3300\0\u3344\0\u3388"+
    "\0\u0484\0\u33cc\0\u3410\0\u3454\0\u3498\0\u0484\0\u34dc\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u0484\0\u3674\0\u0484\0\u0484"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u0484\0\u0484"+
    "\0\u0484\0\u0484\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4"+
    "\0\u39e8\0\u0484\0\u0484\0\u3a2c\0\u3a70\0\u0484\0\u3ab4\0\u0484"+
    "\0\u3af8\0\u3b3c\0\u0484\0\u3b80\0\u0484\0\u3bc4\0\u3c08\0\u0484"+
    "\0\u3c4c\0\u0484\0\u3c90\0\u0484\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0"+
    "\0\u0484\0\u3de4\0\u0484\0\u3e28\0\u0484\0\u0484\0\u3e6c\0\u0484"+
    "\0\u3eb0\0\u3ef4\0\u0484\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048"+
    "\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268"+
    "\0\u42ac\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\3\30"+
    "\1\31\1\32\5\30\1\33\2\30\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\2\30"+
    "\1\46\2\30\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\30\1\62\1\63"+
    "\1\64\105\0\2\3\126\0\1\65\56\0\5\66\1\67"+
    "\76\66\2\70\1\71\1\0\100\70\10\0\1\72\106\0"+
    "\1\73\11\0\1\74\72\0\1\75\10\0\1\76\103\0"+
    "\1\77\1\100\74\0\1\101\111\0\1\102\77\0\1\21"+
    "\24\0\1\103\57\0\1\104\106\0\1\105\103\0\1\106"+
    "\1\107\102\0\1\110\77\0\1\30\6\0\15\30\4\0"+
    "\30\30\24\0\1\30\6\0\4\30\1\111\10\30\4\0"+
    "\30\30\24\0\1\30\6\0\12\30\1\112\2\30\4\0"+
    "\30\30\24\0\1\30\6\0\14\30\1\113\4\0\30\30"+
    "\3\0\2\114\2\0\100\114\21\0\1\30\6\0\15\30"+
    "\4\0\1\30\1\115\26\30\24\0\1\30\6\0\15\30"+
    "\4\0\20\30\1\116\7\30\24\0\1\30\6\0\15\30"+
    "\4\0\1\117\12\30\1\120\2\30\1\121\11\30\24\0"+
    "\1\30\6\0\15\30\4\0\4\30\1\122\22\30\1\123"+
    "\24\0\1\30\6\0\15\30\4\0\13\30\1\124\12\30"+
    "\1\125\1\30\24\0\1\30\6\0\15\30\4\0\1\126"+
    "\7\30\1\127\5\30\1\130\4\30\1\131\4\30\24\0"+
    "\1\30\6\0\15\30\4\0\5\30\1\132\6\30\1\133"+
    "\1\134\12\30\24\0\1\30\6\0\15\30\4\0\4\30"+
    "\1\135\23\30\24\0\1\30\6\0\15\30\4\0\1\136"+
    "\22\30\1\137\4\30\24\0\1\30\6\0\15\30\4\0"+
    "\1\140\3\30\1\141\16\30\1\142\4\30\24\0\1\30"+
    "\6\0\15\30\4\0\23\30\1\143\1\144\3\30\24\0"+
    "\1\30\6\0\15\30\4\0\1\145\17\30\1\146\2\30"+
    "\1\147\4\30\24\0\1\30\6\0\15\30\4\0\4\30"+
    "\1\150\23\30\24\0\1\30\6\0\15\30\4\0\7\30"+
    "\1\151\12\30\1\152\1\153\4\30\24\0\1\30\6\0"+
    "\15\30\4\0\20\30\1\154\7\30\24\0\1\30\6\0"+
    "\15\30\4\0\21\30\1\155\6\30\24\0\1\30\6\0"+
    "\15\30\4\0\10\30\1\156\17\30\24\0\1\30\6\0"+
    "\15\30\4\0\7\30\1\157\20\30\105\0\1\160\26\0"+
    "\1\161\77\0\1\30\6\0\1\30\1\162\13\30\4\0"+
    "\30\30\24\0\1\30\6\0\12\30\1\163\2\30\4\0"+
    "\30\30\24\0\1\30\6\0\10\30\1\164\4\30\4\0"+
    "\30\30\24\0\1\165\103\0\1\30\6\0\15\30\4\0"+
    "\21\30\1\166\6\30\24\0\1\30\6\0\15\30\4\0"+
    "\4\30\1\167\23\30\24\0\1\30\6\0\15\30\4\0"+
    "\13\30\1\170\14\30\24\0\1\30\6\0\15\30\4\0"+
    "\1\171\27\30\24\0\1\30\6\0\15\30\4\0\15\30"+
    "\1\172\12\30\24\0\1\30\6\0\15\30\4\0\5\30"+
    "\1\173\22\30\24\0\1\30\6\0\15\30\4\0\15\30"+
    "\1\174\12\30\24\0\1\30\6\0\15\30\4\0\21\30"+
    "\1\175\6\30\24\0\1\30\6\0\15\30\4\0\17\30"+
    "\1\176\2\30\1\177\5\30\24\0\1\30\6\0\15\30"+
    "\4\0\13\30\1\200\14\30\24\0\1\30\6\0\15\30"+
    "\4\0\15\30\1\201\12\30\24\0\1\30\6\0\15\30"+
    "\4\0\20\30\1\202\7\30\24\0\1\30\6\0\15\30"+
    "\4\0\15\30\1\203\12\30\24\0\1\30\6\0\15\30"+
    "\4\0\15\30\1\204\1\205\11\30\24\0\1\30\6\0"+
    "\15\30\4\0\17\30\1\206\10\30\24\0\1\30\6\0"+
    "\15\30\4\0\16\30\1\207\2\30\1\210\1\211\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\22\30\1\212\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\22\30\1\213\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\13\30\1\214\14\30"+
    "\24\0\1\30\6\0\15\30\4\0\14\30\1\215\13\30"+
    "\24\0\1\30\6\0\15\30\4\0\25\30\1\216\2\30"+
    "\24\0\1\30\6\0\15\30\4\0\13\30\1\217\14\30"+
    "\24\0\1\30\6\0\15\30\4\0\22\30\1\220\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\4\30\1\221\23\30"+
    "\24\0\1\30\6\0\15\30\4\0\20\30\1\222\7\30"+
    "\24\0\1\30\6\0\15\30\4\0\10\30\1\223\5\30"+
    "\1\224\11\30\24\0\1\30\6\0\15\30\4\0\1\30"+
    "\1\225\26\30\24\0\1\30\6\0\15\30\4\0\1\226"+
    "\21\30\1\227\5\30\24\0\1\30\6\0\15\30\4\0"+
    "\1\230\27\30\24\0\1\30\6\0\15\30\4\0\1\231"+
    "\27\30\24\0\1\30\6\0\15\30\4\0\17\30\1\232"+
    "\10\30\24\0\1\30\6\0\15\30\4\0\23\30\1\233"+
    "\4\30\24\0\1\30\6\0\15\30\4\0\10\30\1\234"+
    "\17\30\24\0\1\30\6\0\15\30\4\0\20\30\1\235"+
    "\7\30\24\0\1\30\6\0\15\30\4\0\10\30\1\236"+
    "\17\30\24\0\1\30\6\0\14\30\1\237\4\0\30\30"+
    "\24\0\1\30\6\0\11\30\1\240\3\30\4\0\30\30"+
    "\24\0\1\30\6\0\13\30\1\241\1\30\4\0\30\30"+
    "\24\0\1\30\6\0\15\30\4\0\22\30\1\242\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\1\243\27\30\24\0"+
    "\1\30\6\0\15\30\4\0\13\30\1\244\14\30\24\0"+
    "\1\30\6\0\15\30\4\0\21\30\1\245\6\30\24\0"+
    "\1\30\6\0\15\30\4\0\21\30\1\246\1\247\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\1\250\27\30\24\0"+
    "\1\30\6\0\15\30\4\0\4\30\1\251\23\30\24\0"+
    "\1\30\6\0\15\30\4\0\1\252\27\30\24\0\1\30"+
    "\6\0\15\30\4\0\4\30\1\253\23\30\24\0\1\30"+
    "\6\0\15\30\4\0\21\30\1\254\6\30\24\0\1\30"+
    "\6\0\15\30\4\0\1\255\27\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\256\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\23\30\1\257\4\30\24\0\1\30\6\0"+
    "\15\30\4\0\1\30\1\260\26\30\24\0\1\30\6\0"+
    "\15\30\4\0\13\30\1\261\14\30\24\0\1\30\6\0"+
    "\15\30\4\0\23\30\1\262\4\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\263\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\264\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\24\30\1\265\3\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\266\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\267\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\270\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\13\30\1\271\14\30\24\0\1\30\6\0"+
    "\15\30\4\0\20\30\1\272\7\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\273\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\24\30\1\274\3\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\275\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\13\30\1\276\14\30\24\0\1\30\6\0"+
    "\15\30\4\0\3\30\1\277\24\30\24\0\1\30\6\0"+
    "\15\30\4\0\23\30\1\300\4\30\24\0\1\30\6\0"+
    "\15\30\4\0\17\30\1\301\10\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\302\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\303\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\304\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\15\30\1\305\12\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\306\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\13\30\1\307\14\30\24\0\1\30\6\0"+
    "\5\30\1\310\7\30\4\0\30\30\24\0\1\30\6\0"+
    "\12\30\1\311\2\30\4\0\30\30\24\0\1\30\6\0"+
    "\6\30\1\312\6\30\4\0\30\30\24\0\1\30\6\0"+
    "\15\30\4\0\20\30\1\313\7\30\24\0\1\30\6\0"+
    "\15\30\4\0\12\30\1\314\15\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\315\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\21\30\1\316\6\30\24\0\1\30\6\0"+
    "\15\30\4\0\22\30\1\317\5\30\24\0\1\30\6\0"+
    "\15\30\4\0\10\30\1\320\17\30\24\0\1\30\6\0"+
    "\15\30\4\0\23\30\1\321\4\30\24\0\1\30\6\0"+
    "\15\30\4\0\10\30\1\322\17\30\24\0\1\30\6\0"+
    "\15\30\4\0\15\30\1\323\12\30\24\0\1\30\6\0"+
    "\15\30\4\0\15\30\1\324\12\30\24\0\1\30\6\0"+
    "\15\30\4\0\4\30\1\325\23\30\24\0\1\30\6\0"+
    "\15\30\4\0\13\30\1\326\14\30\24\0\1\30\6\0"+
    "\15\30\4\0\1\327\27\30\24\0\1\30\6\0\15\30"+
    "\4\0\13\30\1\330\14\30\24\0\1\30\6\0\15\30"+
    "\4\0\11\30\1\331\16\30\24\0\1\30\6\0\15\30"+
    "\4\0\4\30\1\332\23\30\24\0\1\30\6\0\15\30"+
    "\4\0\22\30\1\333\5\30\24\0\1\30\6\0\15\30"+
    "\4\0\1\334\27\30\24\0\1\30\6\0\15\30\4\0"+
    "\20\30\1\335\7\30\24\0\1\30\6\0\15\30\4\0"+
    "\1\336\27\30\24\0\1\30\6\0\15\30\4\0\20\30"+
    "\1\337\7\30\24\0\1\30\6\0\15\30\4\0\10\30"+
    "\1\340\17\30\24\0\1\30\6\0\15\30\4\0\21\30"+
    "\1\341\6\30\24\0\1\30\6\0\15\30\4\0\20\30"+
    "\1\342\7\30\24\0\1\30\6\0\15\30\4\0\10\30"+
    "\1\343\17\30\24\0\1\30\6\0\15\30\4\0\1\344"+
    "\27\30\24\0\1\30\6\0\15\30\4\0\4\30\1\345"+
    "\23\30\24\0\1\30\6\0\15\30\4\0\10\30\1\346"+
    "\17\30\24\0\1\30\6\0\15\30\4\0\16\30\1\347"+
    "\11\30\24\0\1\30\6\0\15\30\4\0\20\30\1\350"+
    "\7\30\24\0\1\30\6\0\15\30\4\0\4\30\1\351"+
    "\23\30\24\0\1\30\6\0\15\30\4\0\10\30\1\352"+
    "\17\30\24\0\1\30\6\0\15\30\4\0\20\30\1\353"+
    "\7\30\24\0\1\30\6\0\15\30\4\0\6\30\1\354"+
    "\21\30\24\0\1\30\6\0\15\30\4\0\23\30\1\355"+
    "\4\30\24\0\1\30\6\0\15\30\4\0\4\30\1\356"+
    "\23\30\24\0\1\30\6\0\7\30\1\357\5\30\4\0"+
    "\30\30\24\0\1\30\6\0\15\30\4\0\1\360\27\30"+
    "\24\0\1\30\6\0\15\30\4\0\1\361\27\30\24\0"+
    "\1\30\6\0\15\30\4\0\20\30\1\362\7\30\24\0"+
    "\1\30\6\0\15\30\4\0\15\30\1\363\12\30\24\0"+
    "\1\30\6\0\15\30\4\0\13\30\1\364\14\30\24\0"+
    "\1\30\6\0\15\30\4\0\5\30\1\365\22\30\24\0"+
    "\1\30\6\0\15\30\4\0\3\30\1\366\24\30\24\0"+
    "\1\30\6\0\15\30\4\0\3\30\1\367\24\30\24\0"+
    "\1\30\6\0\15\30\4\0\2\30\1\370\25\30\24\0"+
    "\1\30\6\0\15\30\4\0\13\30\1\371\14\30\24\0"+
    "\1\30\6\0\15\30\4\0\14\30\1\372\13\30\24\0"+
    "\1\30\6\0\15\30\4\0\15\30\1\373\12\30\24\0"+
    "\1\30\6\0\15\30\4\0\5\30\1\374\7\30\1\375"+
    "\12\30\24\0\1\30\6\0\15\30\4\0\20\30\1\376"+
    "\7\30\24\0\1\30\6\0\15\30\4\0\10\30\1\377"+
    "\17\30\24\0\1\30\6\0\15\30\4\0\17\30\1\u0100"+
    "\10\30\24\0\1\30\6\0\15\30\4\0\10\30\1\u0101"+
    "\17\30\24\0\1\30\6\0\15\30\4\0\1\u0102\27\30"+
    "\24\0\1\30\6\0\15\30\4\0\22\30\1\u0103\5\30"+
    "\24\0\1\30\6\0\15\30\4\0\2\30\1\u0104\25\30"+
    "\24\0\1\30\6\0\15\30\4\0\2\30\1\u0105\25\30"+
    "\24\0\1\30\6\0\15\30\4\0\15\30\1\u0106\12\30"+
    "\24\0\1\30\6\0\15\30\4\0\15\30\1\u0107\12\30"+
    "\24\0\1\30\6\0\15\30\4\0\2\30\1\u0108\25\30"+
    "\24\0\1\30\6\0\15\30\4\0\1\u0109\27\30\24\0"+
    "\1\30\6\0\4\30\1\u010a\10\30\4\0\30\30\24\0"+
    "\1\30\6\0\15\30\4\0\2\30\1\u010b\25\30\24\0"+
    "\1\30\6\0\15\30\4\0\20\30\1\u010c\7\30\24\0"+
    "\1\30\6\0\15\30\4\0\23\30\1\u010d\4\30\24\0"+
    "\1\30\6\0\15\30\4\0\23\30\1\u010e\4\30\24\0"+
    "\1\30\6\0\15\30\4\0\22\30\1\u010f\5\30\24\0"+
    "\1\30\6\0\15\30\4\0\16\30\1\u0110\11\30\24\0"+
    "\1\30\6\0\15\30\4\0\21\30\1\u0111\6\30\24\0"+
    "\1\30\6\0\15\30\4\0\7\30\1\u0112\20\30\24\0"+
    "\1\30\6\0\15\30\4\0\4\30\1\u0113\23\30\24\0"+
    "\1\30\6\0\15\30\4\0\2\30\1\u0114\25\30\24\0"+
    "\1\30\6\0\15\30\4\0\1\u0115\27\30\24\0\1\30"+
    "\6\0\15\30\4\0\1\u0116\27\30\24\0\1\30\6\0"+
    "\15\30\4\0\1\u0117\27\30\24\0\1\30\6\0\15\30"+
    "\4\0\1\u0118\27\30\24\0\1\30\6\0\15\30\4\0"+
    "\3\30\1\u0119\24\30\24\0\1\30\6\0\15\30\4\0"+
    "\13\30\1\u011a\14\30\24\0\1\30\6\0\15\30\4\0"+
    "\4\30\1\u011b\23\30\24\0\1\30\6\0\15\30\4\0"+
    "\22\30\1\u011c\5\30\24\0\1\30\6\0\15\30\4\0"+
    "\13\30\1\u011d\14\30\24\0\1\30\6\0\15\30\4\0"+
    "\13\30\1\u011e\14\30\24\0\1\30\6\0\2\30\1\u011f"+
    "\12\30\4\0\30\30\24\0\1\30\6\0\15\30\4\0"+
    "\22\30\1\u0120\5\30\24\0\1\30\6\0\15\30\4\0"+
    "\6\30\1\u0121\21\30\24\0\1\30\6\0\15\30\4\0"+
    "\2\30\1\u0122\25\30\24\0\1\30\6\0\15\30\4\0"+
    "\4\30\1\u0123\23\30\24\0\1\30\6\0\15\30\4\0"+
    "\15\30\1\u0124\12\30\24\0\1\30\6\0\15\30\4\0"+
    "\4\30\1\u0125\23\30\24\0\1\30\6\0\15\30\4\0"+
    "\2\30\1\u0126\25\30\24\0\1\30\6\0\15\30\4\0"+
    "\13\30\1\u0127\14\30\24\0\1\30\6\0\15\30\4\0"+
    "\13\30\1\u0128\14\30\24\0\1\30\6\0\15\30\4\0"+
    "\2\30\1\u0129\25\30\24\0\1\30\6\0\15\30\4\0"+
    "\4\30\1\u012a\23\30\24\0\1\30\6\0\15\30\4\0"+
    "\4\30\1\u012b\23\30\24\0\1\30\6\0\15\30\4\0"+
    "\27\30\1\u012c\24\0\1\30\6\0\7\30\1\u012d\5\30"+
    "\4\0\30\30\24\0\1\30\6\0\15\30\4\0\4\30"+
    "\1\u012e\23\30\24\0\1\30\6\0\15\30\4\0\22\30"+
    "\1\u012f\5\30\24\0\1\30\6\0\15\30\4\0\22\30"+
    "\1\u0130\5\30\24\0\1\30\6\0\15\30\4\0\4\30"+
    "\1\u0131\23\30\4\0\2\u0132\16\0\1\30\6\0\15\30"+
    "\4\0\30\30\24\0\1\30\6\0\15\30\4\0\4\30"+
    "\1\u0133\23\30\24\0\1\30\6\0\15\30\4\0\3\30"+
    "\1\u0134\24\30\24\0\1\30\6\0\3\30\1\u0135\11\30"+
    "\4\0\30\30\24\0\1\30\6\0\15\30\4\0\22\30"+
    "\1\u0136\5\30\24\0\1\30\6\0\15\30\4\0\16\30"+
    "\1\u0137\11\30\24\0\1\30\6\0\15\30\4\0\21\30"+
    "\1\u0138\6\30\4\0\2\u0132\65\0\1\u0139\14\0\2\u013a"+
    "\16\0\1\30\6\0\15\30\4\0\30\30\24\0\1\30"+
    "\6\0\15\30\4\0\20\30\1\u013b\7\30\74\0\1\u013c"+
    "\13\0\2\u013a\56\0\1\u013d\111\0\1\u013e\102\0\1\u013f"+
    "\110\0\1\u0140\103\0\1\u0141\65\0\1\u0142\103\0\1\u0143"+
    "\101\0\1\u0144\121\0\1\u0145\105\0\1\u0146\76\0\1\u0147"+
    "\72\0\1\u0148\77\0\1\u0149\106\0\1\u014a\113\0\1\u014a"+
    "\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17136];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\2\11\2\1\1\11"+
    "\5\1\1\11\3\1\1\11\4\1\1\11\1\1\2\11"+
    "\22\1\1\11\1\1\2\11\1\0\1\11\1\0\12\11"+
    "\1\0\2\11\1\1\2\11\3\1\1\0\43\1\2\11"+
    "\300\1\1\0\6\1\2\0\1\1\16\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _NomLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NomLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 100: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 101: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 102: break;
          case 4:
            { return PERCENT;
            }
          // fall through
          case 103: break;
          case 5:
            { return BITAND;
            }
          // fall through
          case 104: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 105: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 106: break;
          case 8:
            { return TIMES;
            }
          // fall through
          case 107: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 108: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 109: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 110: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 111: break;
          case 13:
            { return SLASH;
            }
          // fall through
          case 112: break;
          case 14:
            { return INT;
            }
          // fall through
          case 113: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 114: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 115: break;
          case 17:
            { return LANGLE;
            }
          // fall through
          case 116: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 117: break;
          case 19:
            { return RANGLE;
            }
          // fall through
          case 118: break;
          case 20:
            { return QMARK;
            }
          // fall through
          case 119: break;
          case 21:
            { return ID;
            }
          // fall through
          case 120: break;
          case 22:
            { return LBRACKET;
            }
          // fall through
          case 121: break;
          case 23:
            { return RBRACKET;
            }
          // fall through
          case 122: break;
          case 24:
            { return BITXOR;
            }
          // fall through
          case 123: break;
          case 25:
            { return LBRACE;
            }
          // fall through
          case 124: break;
          case 26:
            { return BITOR;
            }
          // fall through
          case 125: break;
          case 27:
            { return RBRACE;
            }
          // fall through
          case 126: break;
          case 28:
            { return NEQ;
            }
          // fall through
          case 127: break;
          case 29:
            { return STRING;
            }
          // fall through
          case 128: break;
          case 30:
            { return COMMENT;
            }
          // fall through
          case 129: break;
          case 31:
            { return AND;
            }
          // fall through
          case 130: break;
          case 32:
            { return POW;
            }
          // fall through
          case 131: break;
          case 33:
            { return TIMESEQ;
            }
          // fall through
          case 132: break;
          case 34:
            { return APPEND;
            }
          // fall through
          case 133: break;
          case 35:
            { return PLUSEQ;
            }
          // fall through
          case 134: break;
          case 36:
            { return MINUSEQ;
            }
          // fall through
          case 135: break;
          case 37:
            { return ARROW;
            }
          // fall through
          case 136: break;
          case 38:
            { return DOTDOT;
            }
          // fall through
          case 137: break;
          case 39:
            { return DIVEQ;
            }
          // fall through
          case 138: break;
          case 40:
            { return COLONCOLON;
            }
          // fall through
          case 139: break;
          case 41:
            { return LEQ;
            }
          // fall through
          case 140: break;
          case 42:
            { return EQEQ;
            }
          // fall through
          case 141: break;
          case 43:
            { return BIGARROW;
            }
          // fall through
          case 142: break;
          case 44:
            { return GEQ;
            }
          // fall through
          case 143: break;
          case 45:
            { return IF;
            }
          // fall through
          case 144: break;
          case 46:
            { return IN;
            }
          // fall through
          case 145: break;
          case 47:
            { return OR;
            }
          // fall through
          case 146: break;
          case 48:
            { return EQEQEQ;
            }
          // fall through
          case 147: break;
          case 49:
            { return FLOAT;
            }
          // fall through
          case 148: break;
          case 50:
            { return DYN;
            }
          // fall through
          case 149: break;
          case 51:
            { return FOR;
            }
          // fall through
          case 150: break;
          case 52:
            { return FUN;
            }
          // fall through
          case 151: break;
          case 53:
            { return LET;
            }
          // fall through
          case 152: break;
          case 54:
            { return NEW;
            }
          // fall through
          case 153: break;
          case 55:
            { return OUT;
            }
          // fall through
          case 154: break;
          case 56:
            { return ELSE;
            }
          // fall through
          case 155: break;
          case 57:
            { return NUL;
            }
          // fall through
          case 156: break;
          case 58:
            { return TRUE;
            }
          // fall through
          case 157: break;
          case 59:
            { return DBG;
            }
          // fall through
          case 158: break;
          case 60:
            { return ERR;
            }
          // fall through
          case 159: break;
          case 61:
            { return BREAK;
            }
          // fall through
          case 160: break;
          case 62:
            { return CLASS;
            }
          // fall through
          case 161: break;
          case 63:
            { return FALSE;
            }
          // fall through
          case 162: break;
          case 64:
            { return FINAL;
            }
          // fall through
          case 163: break;
          case 65:
            { return IFOBJ;
            }
          // fall through
          case 164: break;
          case 66:
            { return INOUT;
            }
          // fall through
          case 165: break;
          case 67:
            { return MULTI;
            }
          // fall through
          case 166: break;
          case 68:
            { return SHAPE;
            }
          // fall through
          case 167: break;
          case 69:
            { return SUPER;
            }
          // fall through
          case 168: break;
          case 70:
            { return USING_TKN;
            }
          // fall through
          case 169: break;
          case 71:
            { return WHILE;
            }
          // fall through
          case 170: break;
          case 72:
            { return ELSEIF;
            }
          // fall through
          case 171: break;
          case 73:
            { return IFNULL;
            }
          // fall through
          case 172: break;
          case 74:
            { return LETVAR;
            }
          // fall through
          case 173: break;
          case 75:
            { return PUBLIC;
            }
          // fall through
          case 174: break;
          case 76:
            { return RETURN;
            }
          // fall through
          case 175: break;
          case 77:
            { return STATIC;
            }
          // fall through
          case 176: break;
          case 78:
            { return DEFAULT;
            }
          // fall through
          case 177: break;
          case 79:
            { return EXPANDO;
            }
          // fall through
          case 178: break;
          case 80:
            { return EXTENDS;
            }
          // fall through
          case 179: break;
          case 81:
            { return FOREACH;
            }
          // fall through
          case 180: break;
          case 82:
            { return PARTIAL;
            }
          // fall through
          case 181: break;
          case 83:
            { return PRIVATE;
            }
          // fall through
          case 182: break;
          case 84:
            { return VIRTUAL;
            }
          // fall through
          case 183: break;
          case 85:
            { return ABSTRACT;
            }
          // fall through
          case 184: break;
          case 86:
            { return CONTINUE;
            }
          // fall through
          case 185: break;
          case 87:
            { return INSTANCE;
            }
          // fall through
          case 186: break;
          case 88:
            { return INTERNAL;
            }
          // fall through
          case 187: break;
          case 89:
            { return MATERIAL;
            }
          // fall through
          case 188: break;
          case 90:
            { return OVERRIDE;
            }
          // fall through
          case 189: break;
          case 91:
            { return READONLY;
            }
          // fall through
          case 190: break;
          case 92:
            { return INTERFACE;
            }
          // fall through
          case 191: break;
          case 93:
            { return NAMESPACE;
            }
          // fall through
          case 192: break;
          case 94:
            { return PROTECTED;
            }
          // fall through
          case 193: break;
          case 95:
            { return RUNTIMECMD;
            }
          // fall through
          case 194: break;
          case 96:
            { return CALLTARGET;
            }
          // fall through
          case 195: break;
          case 97:
            { return IMPLEMENTS;
            }
          // fall through
          case 196: break;
          case 98:
            { return CONSTRUCT;
            }
          // fall through
          case 197: break;
          case 99:
            { return INTERNAL_PROT;
            }
          // fall through
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
